import asyncio
from app.services.supabase_service import rpc, table_select, table_insert, table_update, table_delete
from app.services.user_service import get_user_by_email
from app import supabase
from concurrent.futures import ThreadPoolExecutor
from time import time
import json
from datetime import datetime, timezone

def normalize_tx_date(dt):
    """–ü—Ä–∏–≤–æ–¥–∏—Ç –¥–∞—Ç—É –∫ UTC –±–µ–∑ –º–∏–∫—Ä–æ—Å–µ–∫—É–Ω–¥ –∏ –±–µ–∑ —Ç–∞–π–º–∑–æ–Ω—ã (—Å—Ç—Ä–æ–∫–∞, –∫–∞–∫ –≤ Supabase)."""
    if isinstance(dt, str):
        # –ø—Ä–∏–º–µ—Ä: '2025-05-03T07:36:09'
        dt = datetime.fromisoformat(dt.replace("Z", "+00:00"))
    if dt.tzinfo:
        dt = dt.astimezone(timezone.utc)
    dt = dt.replace(tzinfo=None, microsecond=0)
    return dt.strftime("%Y-%m-%d %H:%M:%S")


# –ò—Å–ø–æ–ª—å–∑—É–µ–º asyncio.to_thread, —á—Ç–æ–±—ã –≤—ã–ø–æ–ª–Ω—è—Ç—å sync –≤—ã–∑–æ–≤—ã –≤ –ø–æ—Ç–æ–∫–∞—Ö
async def get_user_portfolios(user_email: str):
    return await asyncio.to_thread(get_user_portfolios_sync, user_email)

async def get_portfolio_assets(portfolio_id: int):
    return await asyncio.to_thread(get_portfolio_assets_sync, portfolio_id)

async def get_portfolio_transactions(portfolio_id: int):
    return await asyncio.to_thread(get_portfolio_transactions_sync, portfolio_id)

async def get_portfolio_value_history(portfolio_id: int):
    return await asyncio.to_thread(get_portfolio_value_history_sync, portfolio_id)


def get_user_portfolios_sync(user_email: str):
    user = get_user_by_email(user_email)
    return rpc("get_user_portfolios", {"u_id": user["id"]})

def get_portfolio_assets_sync(portfolio_id: int):
    return rpc("get_portfolio_assets", {"p_portfolio_id": portfolio_id})

def get_portfolio_transactions_sync(portfolio_id: int):
    return rpc("get_portfolio_transactions", {"p_portfolio_id": portfolio_id})

def get_portfolio_value_history_sync(portfolio_id: int):
    return  rpc("get_portfolio_value_history", {"p_portfolio_id": portfolio_id})


async def get_portfolios_with_assets_and_history(user_email: str):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª–∏, –∏—Ö –∞–∫—Ç–∏–≤—ã –∏ –∏—Å—Ç–æ—Ä–∏—é —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ."""
    start = time()
    portfolios = await get_user_portfolios(user_email) or []
    if not portfolios:
        return [], [], {}
    print('  –ü–æ—Ä—Ç—Ñ–µ–ª–∏: ', time() - start)

    start = time()
    portfolio_ids = [p["id"] for p in portfolios]
    
    assets_tasks = [asyncio.create_task(get_portfolio_assets(pid)) for pid in portfolio_ids]
    histories_tasks = [asyncio.create_task(get_portfolio_value_history(pid)) for pid in portfolio_ids]
    print('  –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–¥–∞—á: ', time() - start)

    start = time()
    assets_results = await asyncio.gather(*assets_tasks, return_exceptions=True)
    print('  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á assets: ', time() - start)
    start = time()
    histories_results = await asyncio.gather(*histories_tasks, return_exceptions=True)
    print('  –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á histories: ', time() - start)

    assets = []
    histories = {}
    for i, p in enumerate(portfolios):
        # –ê–∫—Ç–∏–≤—ã
        if isinstance(assets_results[i], Exception):
            p["assets"] = []
        else:
            p["assets"] = assets_results[i]
            assets.extend(assets_results[i])

        # –ò—Å—Ç–æ—Ä–∏—è
        histories[p["id"]] = histories_results[i] if not isinstance(histories_results[i], Exception) else []

    return portfolios, assets, histories

def update_portfolio_description(portfolio_id: int, text: str = None, capital_target_name: str = None,
                                 capital_target_value: float = None, capital_target_deadline: str = None,
                                 capital_target_currency: str = "RUB"):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
    portfolio = table_select("portfolios", select="description", filters={"id": portfolio_id})
    desc = portfolio[0].get("description") or {}

    if text is not None:
        desc["text"] = text
    if capital_target_name is not None:
        desc["capital_target_name"] = capital_target_name
    if capital_target_value is not None:
        desc["capital_target_value"] = capital_target_value
    if capital_target_deadline is not None:
        desc["capital_target_deadline"] = capital_target_deadline
    if capital_target_currency is not None:
        desc["capital_target_currency"] = capital_target_currency

    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    return table_update("portfolios", {"description": desc}, filters={"id": portfolio_id})

async def get_user_portfolio_parent(user_email: str):
    portfolios = await get_user_portfolios(user_email)
    for portfolio in portfolios:
        if not portfolio["parent_portfolio_id"]:
            return portfolio
    return None

async def clear_portfolio(portfolio_id: int, delete_self: bool = False):
    """
    –û—á–∏—â–∞–µ—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –≤—Å–µ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ:
    - —É–¥–∞–ª—è–µ—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∞–∫—Ç–∏–≤—ã, —Å–≤—è–∑–∏ –±—Ä–æ–∫–µ—Ä–æ–≤;
    - —É–¥–∞–ª—è–µ—Ç –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏;
    - –µ—Å–ª–∏ delete_self=True ‚Äî —É–¥–∞–ª—è–µ—Ç –∏ —Å–∞–º –ø–æ—Ä—Ç—Ñ–µ–ª—å.
    """
    print(f"üßπ –û—á–∏—â–∞–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å {portfolio_id} –∏ –µ–≥–æ –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏")

    try:
        # 1Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏–º –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏
        child_portfolios = await asyncio.to_thread(
            table_select, "portfolios", select="id", filters={"parent_portfolio_id": portfolio_id}
        )

        # 2Ô∏è‚É£ –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –æ—á–∏—â–∞–µ–º –∏ –£–î–ê–õ–Ø–ï–ú –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏
        if child_portfolios:
            await asyncio.gather(*[
                clear_portfolio(child["id"], delete_self=True) for child in child_portfolios
            ])

        # 3Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ –±—Ä–æ–∫–µ—Ä–∞
        await asyncio.to_thread(table_delete, "user_broker_connections", {"portfolio_id": portfolio_id})

        # 4Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
        portfolio_assets = await asyncio.to_thread(
            table_select, "portfolio_assets", select="id, asset_id", filters={"portfolio_id": portfolio_id}
        )

        asset_ids = [pa["asset_id"] for pa in portfolio_assets] if portfolio_assets else []

        # --- –£–¥–∞–ª—è–µ–º –≤—Å–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è —ç—Ç–∏—Ö portfolio_asset_id ---
        for pa in portfolio_assets or []:
            await asyncio.to_thread(table_delete, "transactions", {"portfolio_asset_id": pa["id"]})

        # --- –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ portfolio_assets ---
        await asyncio.to_thread(table_delete, "portfolio_assets", {"portfolio_id": portfolio_id})

        # --- –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∞–∫—Ç–∏–≤—ã, –µ—Å–ª–∏ –æ–Ω–∏ –±–æ–ª—å—à–µ –Ω–∏–≥–¥–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è ---
        for asset_id in asset_ids:
            asset_info = await asyncio.to_thread(
                table_select, "assets", select="asset_type_id", filters={"id": asset_id}
            )
            if not asset_info:
                continue

            asset_type_id = asset_info[0]["asset_type_id"]
            asset_type = await asyncio.to_thread(
                table_select, "asset_types", select="is_custom", filters={"id": asset_type_id}
            )

            if asset_type and asset_type[0].get("is_custom"):
                used_elsewhere = supabase.table("portfolio_assets") \
                    .select("id") \
                    .neq("portfolio_id", portfolio_id) \
                    .eq("asset_id", asset_id) \
                    .execute()

                if not used_elsewhere.data:
                    await asyncio.to_thread(table_delete, "asset_prices", {"asset_id": asset_id})
                    await asyncio.to_thread(table_delete, "assets", {"id": asset_id})

        # 5Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å–≤—è–∑–∏ portfolio_assets
        await asyncio.to_thread(table_delete, "portfolio_assets", {"portfolio_id": portfolio_id})

        # 6Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Å–∞–º –ø–æ—Ä—Ç—Ñ–µ–ª—å (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ delete_self=True)
        if delete_self:
            await asyncio.to_thread(table_delete, "portfolios", {"id": portfolio_id})
            print(f"üóëÔ∏è –£–¥–∞–ª—ë–Ω –¥–æ—á–µ—Ä–Ω–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å {portfolio_id}")
        else:
            print(f"‚úÖ –ì–ª–∞–≤–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å {portfolio_id} –æ—á–∏—â–µ–Ω, –Ω–æ –Ω–µ —É–¥–∞–ª—ë–Ω")

        return {"success": True, "message": f"–ü–æ—Ä—Ç—Ñ–µ–ª—å {portfolio_id} –æ—á–∏—â–µ–Ω"}

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è {portfolio_id}: {e}")
        return {"success": False, "error": str(e)}


# –ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
executor = ThreadPoolExecutor(max_workers=10)

async def table_insert_async(table: str, data: dict):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≤—Å—Ç–∞–≤–∫–∞ —á–µ—Ä–µ–∑ run_in_executor –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ SDK"""
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(executor, lambda: supabase.table(table).insert(data).execute().data)

async def import_broker_portfolio(email: str, parent_portfolio_id: int, broker_data: dict):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π.
    –ù–µ —É–¥–∞–ª—è–µ—Ç —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –Ω–µ –≤—Å—Ç–∞–≤–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã.
    """
    user = get_user_by_email(email)
    user_id = user["id"]

    asset_types = table_select("asset_types")
    asset_type_map = {at["name"].lower(): at["id"] for at in asset_types}

    total_new_tx = 0
    total_updated_tx = 0
    summary = {"added": [], "updated": [], "removed": []}

    for broker_portfolio_name, pdata in broker_data.items():
        print(f"üì¶ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª—å: {broker_portfolio_name}")

        # === 1Ô∏è‚É£ –ù–∞—Ö–æ–¥–∏–º –∏–ª–∏ —Å–æ–∑–¥–∞—ë–º –ø–æ—Ä—Ç—Ñ–µ–ª—å ===
        existing = table_select(
            "portfolios",
            select="id",
            filters={"parent_portfolio_id": parent_portfolio_id, "name": broker_portfolio_name}
        )
        if existing:
            child_portfolio_id = existing[0]["id"]
        else:
            inserted = table_insert("portfolios", {
                "user_id": user_id,
                "name": broker_portfolio_name,
                "parent_portfolio_id": parent_portfolio_id,
                "description": json.dumps({"source": "broker_import"})
            })
            if not inserted:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ {broker_portfolio_name}")
                continue
            child_portfolio_id = inserted[0]["id"]

        # === 2Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è ===
        pa_rows = table_select(
            "portfolio_assets",
            select="id, asset_id, quantity, average_price",
            filters={"portfolio_id": child_portfolio_id}
        )
        asset_ids = [r["asset_id"] for r in pa_rows]
        asset_rows = table_select("assets", select="id, ticker", in_filters={"id": asset_ids})
        db_by_ticker = {
            r["ticker"]: next(a for a in pa_rows if a["asset_id"] == r["id"])
            for r in asset_rows
        }

        broker_positions = pdata.get("positions", [])
        broker_by_ticker = {p["ticker"]: p for p in broker_positions}

        # === 3Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤—ã (–±–µ–∑ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è quantity/avg_price) ===
        for ticker, pos in broker_by_ticker.items():
            instrument_type = pos.get("instrument_type", "share").lower()
            asset_type_id = asset_type_map.get(instrument_type, 1)
            asset = table_select("assets", "id", {"ticker": ticker})
            asset_id = asset[0]["id"] if asset else None

            if not asset_id:
                new_asset = {
                    "asset_type_id": asset_type_id,
                    "user_id": user_id,
                    "name": pos.get("name", ticker),
                    "ticker": ticker,
                    "properties": {},
                }
                res = await table_insert_async("assets", new_asset)
                asset_id = res[0]["id"] if res else None

            if not asset_id:
                continue

            # –ø—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ
            db_asset = db_by_ticker.get(ticker)
            if not db_asset:
                pa = table_insert("portfolio_assets", {
                    "portfolio_id": child_portfolio_id,
                    "asset_id": asset_id,
                })
                pa_id = pa[0]["id"]
                summary["added"].append(ticker)
            else:
                pa_id = db_asset["id"]

        # === 4Ô∏è‚É£ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∞–∫—Ç–∏–≤–æ–≤ ===
        broker_positions = pdata.get("positions", [])
        broker_by_ticker = {}
        figi_to_ticker = {}

        for p in broker_positions:
            ticker = p.get("ticker") or p.get("name") or p.get("figi")
            if not ticker:
                print(f"‚ö†Ô∏è –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –±–µ–∑ —Ç–∏–∫–µ—Ä–∞: {p}")
                continue
            broker_by_ticker[ticker] = p
            figi_to_ticker[p.get("figi")] = ticker  # —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≤—è–∑—å figi ‚Üí ticker


        # === 5Ô∏è‚É£ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ===
        broker_tx = pdata.get("transactions", [])
        if not broker_tx:
            continue

        # portfolio_asset_id –ø–æ —Ç–∏–∫–µ—Ä—É
        p_assets = table_select("portfolio_assets", "id, asset_id", {"portfolio_id": child_portfolio_id})
        asset_rows = table_select("assets", select="id, ticker", in_filters={"id": [p["asset_id"] for p in p_assets]})
        ticker_to_pa = {
            r["ticker"]: p["id"]
            for p in p_assets
            for r in asset_rows
            if p["asset_id"] == r["id"]
        }

        db_tx = table_select(
            "transactions",
            select="id, portfolio_asset_id, price, quantity, transaction_date, transaction_type",
            filters={"user_id": user_id}
        )

        db_index = {
            (tx["portfolio_asset_id"], float(tx["price"]), float(tx["quantity"]),
            normalize_tx_date(tx["transaction_date"])): tx
            for tx in db_tx
        }
        print(db_index)

        new_tx = 0
        affected_pa_ids = set()  # <- —Å—é–¥–∞ –±—É–¥–µ–º —Å–æ–±–∏—Ä–∞—Ç—å –≤—Å–µ portfolio_asset_id, –ø–æ –∫–æ—Ç–æ—Ä—ã–º –±—ã–ª–∏ –Ω–æ–≤—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

        for tx in broker_tx:
            figi = tx.get("figi")
            ticker = figi_to_ticker.get(figi)
            if not ticker:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Ç–∏–∫–µ—Ä –¥–ª—è figi={figi}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
                continue

            pa_id = ticker_to_pa.get(ticker)
            if not pa_id:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω portfolio_asset –¥–ª—è {ticker}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é")
                continue

            tx_date_str = normalize_tx_date(tx["date"])
            key = (pa_id, float(tx["price"]), float(tx["quantity"]), tx_date_str)
            print(key)

            tx_type = 1 if tx["type"] == "buy" else 2

            if key in db_index:
                continue  # —É–∂–µ –µ—Å—Ç—å —Ç–∞–∫–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è

            tx_data = {
                "portfolio_asset_id": pa_id,
                "transaction_type": tx_type,
                "price": tx["price"],
                "quantity": tx["quantity"],
                "transaction_date": tx_date_str,
                "user_id": user_id
            }
            table_insert("transactions", tx_data)
            new_tx += 1
            affected_pa_ids.add(pa_id)  # –∑–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ —ç—Ç–æ—Ç –∞–∫—Ç–∏–≤ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ—Å—á–∏—Ç–∞—Ç—å

        print(f"‚Üí –î–æ–±–∞–≤–ª–µ–Ω–æ {new_tx} –Ω–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π")

        # === 5Ô∏è‚É£.2 –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç —É –±—Ä–æ–∫–µ—Ä–∞ ===
        broker_keys = set()
        for tx in broker_tx:
            figi = tx.get("figi")
            ticker = figi_to_ticker.get(figi)
            if not ticker:
                continue
            pa_id = ticker_to_pa.get(ticker)
            if not pa_id:
                continue
            tx_date_str = normalize_tx_date(tx["date"])
            key = (pa_id, round(float(tx["price"]), 4), round(float(tx["quantity"]), 4), tx_date_str)
            broker_keys.add(key)

        # –æ–±–Ω–æ–≤–ª—è–µ–º db_index –ø–æ—Å–ª–µ –≤—Å—Ç–∞–≤–æ–∫
        db_tx = table_select(
            "transactions",
            select="id, portfolio_asset_id, price, quantity, transaction_date, transaction_type",
            in_filters={"portfolio_asset_id": list(ticker_to_pa.values())}
        )
        db_index = {
            (tx["portfolio_asset_id"], round(float(tx["price"]), 4),
             round(float(tx["quantity"]), 4), normalize_tx_date(tx["transaction_date"])): tx
            for tx in db_tx
        }

        db_keys = set(db_index.keys())
        to_remove = db_keys - broker_keys

        removed_pa_ids = set()
        for key in to_remove:
            tx = db_index[key]
            print(f"üóë –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω—é—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: {tx}")
            table_delete("transactions", {"id": tx["id"]})
            summary["removed"].append(tx["id"])
            removed_pa_ids.add(tx["portfolio_asset_id"])

        affected_pa_ids.update(removed_pa_ids)


        # === 6Ô∏è‚É£ –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –∞–∫—Ç–∏–≤—ã ===
        for pa_id in affected_pa_ids:
            try:
                rpc("update_portfolio_asset", {"pa_id": pa_id})
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ update_portfolio_asset –¥–ª—è pa_id={pa_id}: {e}")


    print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –î–æ–±–∞–≤–ª–µ–Ω–æ {len(summary['added'])}, –æ–±–Ω–æ–≤–ª–µ–Ω–æ {len(summary['updated'])}. –ù–æ–≤—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_new_tx}")

    return {
        "success": True,
        "summary": summary,
        "new_transactions": total_new_tx,
        "updated_transactions": total_updated_tx
    }


