from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from datetime import datetime
import asyncio
from app.services.supabase_service import *
from app.services.portfolio_service import (
    get_user_portfolios,
    get_portfolio_assets,
    get_portfolio_transactions,
    get_portfolio_value_history,
    import_broker_portfolio,
    clear_portfolio,
    get_user_portfolio_parent
)
from app.services.user_service import get_user_by_email
from app.utils.tinkoff_service import get_full_portfolio
import asyncio

portfolio_bp = Blueprint("portfolio", __name__)

@portfolio_bp.route("/list", methods=["GET"])
@jwt_required()
def list_portfolios_route():
    user_email = get_jwt_identity()
    data = asyncio.run(get_user_portfolios(user_email))
    return jsonify(data)

@portfolio_bp.route("/add", methods=["POST"])
@jwt_required()
def add_portfolio_route():
    user_email = get_jwt_identity()
    user_id = get_user_by_email(user_email)["id"]

    data = request.get_json()
    parent_portfolio_id = data.get("parent_portfolio_id")
    portfolio_name = data.get("name")

    insert_data = {
        "user_id": user_id,
        "parent_portfolio_id": parent_portfolio_id,
        "name": portfolio_name,
        "description": {}
    }
    res = table_insert("portfolios", insert_data)
    return jsonify(res)

@portfolio_bp.route("/<int:portfolio_id>/assets", methods=["GET"])
@jwt_required()
def portfolio_assets_route(portfolio_id):
    data = asyncio.run(get_portfolio_assets(portfolio_id))
    return jsonify(data)

@portfolio_bp.route("/<int:portfolio_id>/transactions", methods=["GET"])
@jwt_required()
def portfolio_transactions_route(portfolio_id):
    data = asyncio.run(get_portfolio_transactions(portfolio_id))
    return jsonify(data)

@portfolio_bp.route("/transaction/add", methods=["POST"])
@jwt_required()
def add_transaction_route():
    payload = request.get_json()
    # –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ payload —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç portfolio_id, asset_id –∏–ª–∏ ticker...
    res = table_insert("transactions", payload)
    return jsonify(res), 201

@portfolio_bp.route("/<int:portfolio_id>/history", methods=["GET"])
@jwt_required()
def portfolio_history_route(portfolio_id):
    data = asyncio.run(get_portfolio_value_history(portfolio_id))
    return jsonify(data)

@portfolio_bp.route("/<int:portfolio_id>/clear", methods=["POST"])
@jwt_required()
def portfolio_clear_route(portfolio_id):
    email = get_jwt_identity()
    print('–ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è', portfolio_id)
    data = asyncio.run(clear_portfolio(portfolio_id))
    return jsonify(data)

@portfolio_bp.route("/import_tinkoff", methods=["POST"])
@jwt_required()
async def import_broker_portfolio_route():
    print('–ó–∞–ø—Ä–æ—Å –∏–º–ø–æ—Ä—Ç–∞')
    """
    –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –ø–æ—Ä—Ç—Ñ–µ–ª—è –æ—Ç –±—Ä–æ–∫–µ—Ä–∞.
    –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω portfolio_id ‚Äî –æ—á–∏—â–∞–µ—Ç –µ–≥–æ (–≤–º–µ—Å—Ç–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è–º–∏) –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º.
    –ï—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω ‚Äî —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å –∏ –∏–º–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç —Ç—É–¥–∞.
    """
    user_email = get_jwt_identity()
    data = request.get_json()

    token = data.get("token")
    portfolio_id = data.get("portfolio_id")
    portfolio_name = data.get("portfolio_name")

    print('–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã', portfolio_id, portfolio_name, 'token=' + ('–µ—Å—Ç—å' if token else '–Ω–µ—Ç'))

    if not token:
        return jsonify({"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±—Ä–æ–∫–µ—Ä–∞"}), 400

    try:
        # 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user = get_user_by_email(user_email)
        user_id = user["id"]
        broker_id = 1  # –Ω–∞–ø—Ä–∏–º–µ—Ä, 1 ‚Äî –¢–∏–Ω—å–∫–æ—Ñ—Ñ

        # 2Ô∏è‚É£ –ï—Å–ª–∏ portfolio_id –Ω–µ —É–∫–∞–∑–∞–Ω ‚Äî —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å
        if not portfolio_id:
            user_parent_portfolio = await get_user_portfolio_parent(user_email)
            new_portfolio = {
                "user_id": user_id,
                "parent_portfolio_id":  user_parent_portfolio["id"],
                "name": portfolio_name or "–ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å",
                "description": f"–ò–º–ø–æ—Ä—Ç –∏–∑ –±—Ä–æ–∫–µ—Ä–∞ {datetime.utcnow().isoformat()}",
            }
            res = supabase.table("portfolios").insert(new_portfolio).execute()
            if not res.data:
                return jsonify({"success": False, "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"}), 500
            portfolio_id = res.data[0]["id"]
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (id={portfolio_id})")
        else:
            # üî• –ï—Å–ª–∏ ID –µ—Å—Ç—å ‚Äî –æ—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å (–≤–º–µ—Å—Ç–µ —Å –¥–æ—á–µ—Ä–Ω–∏–º–∏)
            print(f"‚öôÔ∏è –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å {portfolio_id} –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º...")
            await clear_portfolio(portfolio_id)

        # 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞
        broker_data = get_full_portfolio(token, 365)
        if not broker_data:
            return jsonify({"success": False, "error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞"}), 500

        # 4Ô∏è‚É£ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        print(f"üì• –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–∫–µ—Ä–∞ –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å {portfolio_id}...")
        result = await import_broker_portfolio(user_email, portfolio_id, broker_data)

        # 5Ô∏è‚É£ –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–≤—è–∑—å —Å –±—Ä–æ–∫–µ—Ä–æ–º
        connection_res = (
            supabase.table("user_broker_connections")
            .select("*")
            .eq("user_id", user_id)
            .eq("broker_id", broker_id)
            .eq("portfolio_id", portfolio_id)
            .execute()
        )

        conn_data = {
            "user_id": user_id,
            "broker_id": broker_id,
            "portfolio_id": portfolio_id,
            "api_key": token,
            "last_sync_at": datetime.utcnow().isoformat(),
        }

        if connection_res.data:
            supabase.table("user_broker_connections") \
                .update(conn_data) \
                .eq("id", connection_res.data[0]["id"]) \
                .execute()
        else:
            supabase.table("user_broker_connections").insert(conn_data).execute()

        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –ø–æ—Ä—Ç—Ñ–µ–ª—è {portfolio_id} –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")

        return jsonify({
            "success": True,
            "message": "–ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ",
            "portfolio_id": portfolio_id,
            "import_result": result,
        }), 201

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:", e)
        return jsonify({"success": False, "error": str(e)}), 500