from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from datetime import datetime
import asyncio
from app.services.supabase_service import *
from app.services.portfolio_service import (
    get_user_portfolios,
    get_portfolio_assets,
    get_portfolio_transactions,
    get_portfolio_value_history,
    import_broker_portfolio,
    clear_portfolio,
    get_user_portfolio_parent,
    update_portfolio_description
)
from app.services.user_service import get_user_by_email

portfolio_bp = Blueprint("portfolio", __name__)

@portfolio_bp.route("/list", methods=["GET"])
@jwt_required()
def list_portfolios_route():
    user_email = get_jwt_identity()
    data = asyncio.run(get_user_portfolios(user_email))
    return jsonify(data)

@portfolio_bp.route("/add", methods=["POST"])
@jwt_required()
def add_portfolio_route():
    user_email = get_jwt_identity()
    user_id = get_user_by_email(user_email)["id"]

    data = request.get_json()
    parent_portfolio_id = data.get("parent_portfolio_id")
    portfolio_name = data.get("name")

    if not parent_portfolio_id:
        parent_portfolio_id = asyncio.run(get_user_portfolio_parent(user_email))["id"]
        print(parent_portfolio_id)

    insert_data = {
        "user_id": user_id,
        "parent_portfolio_id": parent_portfolio_id,
        "name": portfolio_name,
        "description": {}
    }
    res = table_insert("portfolios", insert_data)
    return jsonify({"success": True, "portfolio": res[0]}), 201

@portfolio_bp.route("/<int:portfolio_id>/delete", methods=["DELETE"])
@jwt_required()
def delete_portfolio_route(portfolio_id):
    print('–ó–∞–ø—Ä–æ—Å —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª—è', portfolio_id)
    data = asyncio.run(clear_portfolio(portfolio_id, True))
    return jsonify(data)

@portfolio_bp.route("/<int:portfolio_id>/clear", methods=["POST"])
@jwt_required()
def portfolio_clear_route(portfolio_id):
    print('–ó–∞–ø—Ä–æ—Å –æ—á–∏—Å—Ç–∫–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è', portfolio_id)
    data = asyncio.run(clear_portfolio(portfolio_id))
    return jsonify(data)

@portfolio_bp.route("/<int:portfolio_id>/assets", methods=["GET"])
@jwt_required()
def portfolio_assets_route(portfolio_id):
    data = asyncio.run(get_portfolio_assets(portfolio_id))
    return jsonify(data)

@portfolio_bp.route("/<int:portfolio_id>/description", methods=["POST"])
@jwt_required()
def update_portfolio_description_route(portfolio_id):
    user_email = get_jwt_identity()
    data = request.get_json()

    text = data.get("text")
    capital_target_name = data.get("capital_target_name")
    capital_target_value = data.get("capital_target_value")
    capital_target_deadline = data.get("capital_target_deadline")
    capital_target_currency = data.get("capital_target_currency", "RUB")

    try:
        # –ú–æ–∂–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, —á—Ç–æ –ø–æ—Ä—Ç—Ñ–µ–ª—å –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        updated = update_portfolio_description(
            portfolio_id,
            text=text,
            capital_target_name=capital_target_name,
            capital_target_value=capital_target_value,
            capital_target_deadline=capital_target_deadline,
            capital_target_currency=capital_target_currency
        )
        return jsonify({"success": True, "description": updated}), 200
    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500


@portfolio_bp.route("/<int:portfolio_id>/history", methods=["GET"])
@jwt_required()
def portfolio_history_route(portfolio_id):
    data = asyncio.run(get_portfolio_value_history(portfolio_id))
    return jsonify(data)


@portfolio_bp.route("/import_broker", methods=["POST"])
@jwt_required()
async def import_broker_route():
    """
    –ò–º–ø–æ—Ä—Ç –∏–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π —Å –±—Ä–æ–∫–µ—Ä–æ–º (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¢–∏–Ω—å–∫–æ—Ñ—Ñ).
    –†–∞–±–æ—Ç–∞–µ—Ç —Å –¥–≤—É—Ö—É—Ä–æ–≤–Ω–µ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–π: —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π + –¥–æ—á–µ—Ä–Ω–∏–µ –ø–æ—Ä—Ç—Ñ–µ–ª–∏.
    """
    print('üì• –ó–∞–ø—Ä–æ—Å —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è')

    data = request.get_json()
    user_email = get_jwt_identity()

    broker_id = data.get("broker_id")          # –Ω–∞–ø—Ä–∏–º–µ—Ä, 1 = Tinkoff
    token = data.get("token")
    portfolio_id = data.get("portfolio_id")    # id —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    portfolio_name = data.get("portfolio_name")

    if not broker_id:
        return jsonify({"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω –±—Ä–æ–∫–µ—Ä"}), 400
    if not token:
        return jsonify({"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –∏–ª–∏ API-–∫–ª—é—á –±—Ä–æ–∫–µ—Ä–∞"}), 400

    try:
        # === 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ===
        user = get_user_by_email(user_email)
        user_id = user["id"]

        # === 2Ô∏è‚É£ –°–æ–∑–¥–∞–Ω–∏–µ –∏–ª–∏ –ø–æ–∏—Å–∫ —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è ===
        if not portfolio_id:
            user_root_portfolio = await get_user_portfolio_parent(user_email)
            new_portfolio = {
                "user_id": user_id,
                "parent_portfolio_id": user_root_portfolio["id"],
                "name": portfolio_name or f"–ü–æ—Ä—Ç—Ñ–µ–ª—å {broker_id}",
                "description": f"–ò–º–ø–æ—Ä—Ç –∏–∑ –±—Ä–æ–∫–µ—Ä–∞ {broker_id} ‚Äî {datetime.utcnow().isoformat()}",
            }
            res = supabase.table("portfolios").insert(new_portfolio).execute()
            if not res.data:
                return jsonify({"success": False, "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è"}), 500
            portfolio_id = res.data[0]["id"]
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –ø–æ—Ä—Ç—Ñ–µ–ª—å id={portfolio_id}")
        else:
            print(f"üîÅ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è id={portfolio_id}")

        # === 3Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç –±—Ä–æ–∫–µ—Ä–∞ ===
        print(f"üöÄ –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –±—Ä–æ–∫–µ—Ä–∞: {broker_id}")

        if broker_id == 1:
            from app.services.integrations.tinkoff_import import get_tinkoff_portfolio
            broker_data = get_tinkoff_portfolio(token, 365)
        else:
            return jsonify({"success": False, "error": f"–ò–º–ø–æ—Ä—Ç –¥–ª—è –±—Ä–æ–∫–µ—Ä–∞ {broker_id} –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω"}), 400

        # === 4Ô∏è‚É£ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø–æ—Ä—Ç—Ñ–µ–ª–µ–π –∏ –∞–∫—Ç–∏–≤–æ–≤ ===
        from app.services.portfolio_service import import_broker_portfolio
        result = await import_broker_portfolio(user_email, portfolio_id, broker_data)

        # === 5Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º user_broker_connections ===
        conn_data = {
            "user_id": user_id,
            "broker_id": broker_id,
            "portfolio_id": portfolio_id,
            "api_key": token,
            "last_sync_at": datetime.utcnow().isoformat(),
        }

        existing_conn = table_select(
            "user_broker_connections",
            "*",
            {"user_id": user_id, "broker_id": broker_id, "portfolio_id": portfolio_id}
        )
        if existing_conn:
            supabase.table("user_broker_connections") \
                .update(conn_data) \
                .eq("id", existing_conn[0]["id"]) \
                .execute()
        else:
            supabase.table("user_broker_connections").insert(conn_data).execute()

        print(f"‚úÖ –ò–º–ø–æ—Ä—Ç –±—Ä–æ–∫–µ—Ä–∞ {broker_id} –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ")

        return jsonify({
            "success": True,
            "message": f"–ò–º–ø–æ—Ä—Ç –∏–∑ {broker_id} –∑–∞–≤–µ—Ä—à—ë–Ω —É—Å–ø–µ—à–Ω–æ",
            "portfolio_id": portfolio_id,
            "import_result": result,
        }), 201

    except Exception as e:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –±—Ä–æ–∫–µ—Ä–∞:", e)
        return jsonify({"success": False, "error": str(e)}), 500

