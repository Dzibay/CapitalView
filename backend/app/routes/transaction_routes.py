from flask import Blueprint, request, jsonify
from flask_jwt_extended import jwt_required, get_jwt_identity
from app.services.transactions_service import get_transactions
from app.services.supabase_service import table_select, table_insert, table_delete, table_update, rpc
from app.services.user_service import get_user_by_email

transactions_bp = Blueprint("transactions", __name__)

# üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –∞–∫—Ç–∏–≤—É, –ø–æ—Ä—Ç—Ñ–µ–ª—é –∏ –ø–µ—Ä–∏–æ–¥—É
@transactions_bp.route("/", methods=["GET"])
@jwt_required()
def get_transactions_route():
    user_email = get_jwt_identity()
    user_id = get_user_by_email(user_email)["id"]

    asset_name = request.args.get("asset_name")
    portfolio_id = request.args.get("portfolio_id")
    start_date = request.args.get("start_date")
    end_date = request.args.get("end_date")
    limit = request.args.get("limit")

    limit = int(limit) if limit else None
    portfolio_id = int(portfolio_id) if portfolio_id else None

    data = get_transactions(user_id, portfolio_id, asset_name, start_date, end_date, limit)

    return jsonify(data)

@transactions_bp.route("/", methods=["POST"])
@jwt_required()
def add_transaction_route():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ü–µ–Ω—ã –∞–∫—Ç–∏–≤–∞, –µ—Å–ª–∏ –Ω–∞ –¥–∞—Ç—É –µ—ë –Ω–µ—Ç."""
    payload = request.get_json()
    user_email = get_jwt_identity()
    user_id = get_user_by_email(user_email)["id"]

    portfolio_asset_id = payload.get("portfolio_asset_id")
    asset_id = payload.get("asset_id")        # —Ç–æ–ª—å–∫–æ –¥–ª—è asset_prices
    tx_date = payload.get("transaction_date")
    price = payload.get("price")

    # --- 1Ô∏è‚É£ –î–æ–±–∞–≤–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é ---
    tx_data = {
        "user_id": user_id,
        "portfolio_asset_id": portfolio_asset_id,
        "transaction_type": payload.get("transaction_type"),
        "quantity": payload.get("quantity"),
        "price": price,
        "transaction_date": tx_date,
    }
    res_transaction = table_insert("transactions", tx_data)

    if not res_transaction:
        return jsonify({"success": False, "error": "–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"}), 500

    # --- 2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ü–µ–Ω—ã ---
    existing_price = (table_select("asset_prices", "id", filters={"asset_id": asset_id, "trade_date": tx_date}))

    # --- 3Ô∏è‚É£ –ï—Å–ª–∏ —Ü–µ–Ω—ã –Ω–µ—Ç ‚Äî –¥–æ–±–∞–≤–ª—è–µ–º ---
    if not existing_price:
        table_insert("asset_prices", {"asset_id": asset_id, "price": price, "trade_date": tx_date})
        

    # --- 4Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º —Ä–∞—Å—á—ë—Ç—ã –ø–æ –ø–æ—Ä—Ç—Ñ–µ–ª—å–Ω–æ–º—É –∞–∫—Ç–∏–≤—É ---
    rpc("update_portfolio_asset", {"pa_id": portfolio_asset_id})

    return jsonify({"success": True, "transaction": res_transaction[0]}), 201


@transactions_bp.route("/", methods=["DELETE"])
@jwt_required()
def delete_transactions_route():
    """–£–¥–∞–ª–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –∞–∫—Ç–∏–≤–æ–≤."""
    payload = request.get_json()
    ids = payload.get("ids", [])
    print(ids)

    if not ids:
        return jsonify({"success": False, "error": "–°–ø–∏—Å–æ–∫ ID –ø—É—Å—Ç"}), 400

    try:
        # --- 1Ô∏è‚É£ –ü–æ–ª—É—á–∞–µ–º portfolio_asset_id –¥–ª—è —É–¥–∞–ª—è–µ–º—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ---
        affected_rows = table_select(
            "transactions",
            select="portfolio_asset_id",
            in_filters={"id": ids}
        )

        # —Ñ–∏–ª—å—Ç—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∏–≥–Ω–æ—Ä–∏—Ä—É—è None
        affected_assets = list({row["portfolio_asset_id"] for row in affected_rows if row["portfolio_asset_id"]})


        # --- 2Ô∏è‚É£ –£–¥–∞–ª—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ ---
        deleted = table_delete("transactions", in_filters={"id": ids})
        print(deleted)

        # --- 3Ô∏è‚É£ –û–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∑–∞—Ç—Ä–æ–Ω—É—Ç—ã–µ –∞–∫—Ç–∏–≤—ã ---
        print(affected_assets)
        if affected_assets:
            rpc("update_assets_after_tx_delete", {"asset_ids": affected_assets})

        return jsonify({
            "success": True,
            "deleted": len(deleted),
            "updated_assets": len(affected_assets)
        }), 200

    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500

    

@transactions_bp.route("/", methods=["PUT"])
@jwt_required()
def update_transaction_route():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –ø–æ ID."""
    payload = request.get_json()
    print(payload)
    
    tx_id = payload.get("transaction_id")
    if not tx_id:
        return jsonify({"success": False, "error": "–ù–µ —É–∫–∞–∑–∞–Ω ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"}), 400

    # –ü–æ–ª—É—á–∞–µ–º portfolio_asset_id –∏–∑ –±–∞–∑—ã, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç –≤ payload
    pa_id = payload.get("portfolio_asset_id")
    if not pa_id:
        tx_record = table_select("transactions", select="portfolio_asset_id", filters={"id": tx_id})
        if tx_record and len(tx_record) > 0:
            pa_id = tx_record[0].get("portfolio_asset_id")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ª–æ–≤–∞—Ä—å —Ç–æ–ª—å–∫–æ —Å —Ä–µ–∞–ª—å–Ω–æ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
    update_data = {
        "transaction_type": 1 if payload.get("transaction_type") == '–ü–æ–∫—É–ø–∫–∞' else 2,
        "price": payload.get("price"),
        "quantity": payload.get("quantity"),
        "transaction_date": payload.get("transaction_date")
    }
    # –£–±–∏—Ä–∞–µ–º –∫–ª—é—á–∏ —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º None
    update_data = {k: v for k, v in update_data.items() if v is not None}

    if not update_data:
        return jsonify({"success": False, "error": "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"}), 400

    try:
        res = table_update("transactions", update_data, {"id": tx_id})

        if not res:
            return jsonify({"success": False, "error": "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"}), 404

        # –ï—Å–ª–∏ –µ—Å—Ç—å portfolio_asset_id ‚Äî –ø–µ—Ä–µ—Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤
        if pa_id:
            rpc("update_portfolio_asset", {"pa_id": pa_id})

        return jsonify({"success": True, "updated": res[0]}), 200

    except Exception as e:
        return jsonify({"success": False, "error": str(e)}), 500
